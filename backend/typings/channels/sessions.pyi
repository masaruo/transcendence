"""
This type stub file was generated by pyright.
"""

class CookieMiddleware:
    """
    Extracts cookies from HTTP or WebSocket-style scopes and adds them as a
    scope["cookies"] entry with the same format as Django's request.COOKIES.
    """
    def __init__(self, inner) -> None:
        ...
    
    async def __call__(self, scope, receive, send):
        ...
    
    @classmethod
    def set_cookie(cls, message, key, value=..., max_age=..., expires=..., path=..., domain=..., secure=..., httponly=..., samesite=...): # -> None:
        """
        Sets a cookie in the passed HTTP response message.

        ``expires`` can be:
        - a string in the correct format,
        - a naive ``datetime.datetime`` object in UTC,
        - an aware ``datetime.datetime`` object in any time zone.
        If it is a ``datetime.datetime`` object then ``max_age`` will be calculated.
        """
        ...
    
    @classmethod
    def delete_cookie(cls, message, key, path=..., domain=...): # -> None:
        """
        Deletes a cookie in a response.
        """
        ...
    


class InstanceSessionWrapper:
    """
    Populates the session in application instance scope, and wraps send to save
    the session.
    """
    save_message_types = ...
    cookie_response_message_types = ...
    def __init__(self, scope, send) -> None:
        ...
    
    async def resolve_session(self): # -> None:
        ...
    
    async def send(self, message):
        """
        Overridden send that also does session saves/cookies.
        """
        ...
    
    async def save_session(self): # -> None:
        """
        Saves the current session.
        """
        ...
    


class SessionMiddleware:
    """
    Class that adds Django sessions (from HTTP cookies) to the
    scope. Works with HTTP or WebSocket protocol types (or anything that
    provides a "headers" entry in the scope).

    Requires the CookieMiddleware to be higher up in the stack.
    """
    def __init__(self, inner) -> None:
        ...
    
    async def __call__(self, scope, receive, send):
        """
        Instantiate a session wrapper for this scope, resolve the session and
        call the inner application.
        """
        ...
    


def SessionMiddlewareStack(inner): # -> CookieMiddleware:
    ...

