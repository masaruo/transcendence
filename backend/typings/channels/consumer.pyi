"""
This type stub file was generated by pyright.
"""

from .db import database_sync_to_async

def get_handler_name(message):
    """
    Looks at a message, checks it has a sensible type, and returns the
    handler name for that type.
    """
    ...

class AsyncConsumer:
    """
    Base consumer class. Implements the ASGI application spec, and adds on
    channel layer management and routing of events to named methods based
    on their type.
    """
    _sync = ...
    channel_layer_alias = ...
    async def __call__(self, scope, receive, send): # -> None:
        """
        Dispatches incoming messages to type-based handlers asynchronously.
        """
        ...
    
    async def dispatch(self, message): # -> None:
        """
        Works out what to do with a message.
        """
        ...
    
    async def send(self, message): # -> None:
        """
        Overrideable/callable-by-subclasses send method.
        """
        ...
    
    @classmethod
    def as_asgi(cls, **initkwargs): # -> Callable[..., CoroutineType[Any, Any, None]]:
        """
        Return an ASGI v3 single callable that instantiates a consumer instance
        per scope. Similar in purpose to Django's as_view().

        initkwargs will be used to instantiate the consumer instance.
        """
        ...
    


class SyncConsumer(AsyncConsumer):
    """
    Synchronous version of the consumer, which is what we write most of the
    generic consumers against (for now). Calls handlers in a threadpool and
    uses CallBouncer to get the send method out to the main event loop.

    It would have been possible to have "mixed" consumers and auto-detect
    if a handler was awaitable or not, but that would have made the API
    for user-called methods very confusing as there'd be two types of each.
    """
    _sync = ...
    @database_sync_to_async
    def dispatch(self, message): # -> None:
        """
        Dispatches incoming messages to type-based handlers asynchronously.
        """
        ...
    
    def send(self, message): # -> None:
        """
        Overrideable/callable-by-subclasses send method.
        """
        ...
    


