services:
  django:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=${DEBUG:-False}
    restart:
      always
    volumes:
      - .:/app
      - static_volumes:/vol/web/static
      - media_volumes:/vol/web/media
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
      /bin/bash -c "cd /app/app && \
      python manage.py migrate && \
      python manage.py collectstatic --noinput && \
      daphne -b 0.0.0.0 -p 8000 app.asgi:application"

  nginx:
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/cert.pem:/etc/nginx/certs/cert.pem
      - ./nginx/key.pem:/etc/nginx/certs/key.pem
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volumes:/vol/web/static
      - media_volumes:/vol/web/media
    networks:
      - backend
    depends_on:
      - django

  db:
    image: postgres:15
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7.4-alpine
    restart: always
    volumes:
      - redis_channel_layer:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  postgres_volume:
    name: transcendence_db_volume
  redis_channel_layer:
    name: transcendence_channle_layer_volume
  static_volumes:
    name: transcendence_static_volume
  media_volumes:
    name: transcendence_media_volume

networks:
  backend:
    name: transcendence
